amcl:
  ros__parameters:
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel" # Use "nav2_amcl::DifferentialMotionModel" if you have a differential drive robot
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true # map to odom frame transform
    transform_tolerance: 1.0
    update_min_a: 0.05
    update_min_d: 0.05
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# DWB Controller optimized for straight-line navigation
# Key strategy: Heavily penalize deviation from planned path

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 10.0
      
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05
      yaw_goal_tolerance: 0.05

    # OPTIMIZED DWB FOR OMNIWHEELS - Prevent zigzag motion
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      
      # Keep your original velocity limits
      min_vel_x: -0.15
      min_vel_y: -0.15
      max_vel_x: 0.15
      max_vel_y: 0.15
      max_vel_theta: 0.5
      min_speed_xy: 0.05
      max_speed_xy: 0.15
      min_speed_theta: 0.1
      
      acc_lim_x: 1.5
      acc_lim_y: 1.5
      acc_lim_theta: 3.0
      decel_lim_x: -1.5
      decel_lim_y: -1.5
      decel_lim_theta: -3.0
      
      # KEY: Reduce sampling to prevent zigzag selection
      vx_samples: 2       # Much fewer samples
      vy_samples: 2       # Fewer lateral samples  
      vtheta_samples: 2   # Fewer rotation samples
      
      # Longer simulation time for more stable trajectories
      sim_time: 1.2       # Increased from 1.2
      linear_granularity: 0.05    # Coarser granularity
      angular_granularity: 0.025   # Coarser granularity
      
      transform_tolerance: 2.0 # changed from 0.1, should be more lenient
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.01
      short_circuit_trajectory_evaluation: True
      stateful: True
      
      # CRITICAL: Add trajectory caching to reduce oscillation
      include_vel_of_obstacle: false
      prune_plan: true
      prune_distance: 1.0
      
    # HOLONOMIC CRITIC CONFIGURATION
      critics: [
        "PathDist",           # Follow the planned path
        "GoalDist",          # Get to the goal
        "GoalAlign",
        "PathAlign",         # Stay aligned with path direction
        "PreferForward",     # Prefer forward motion when possible
        "RotateToGoal",      # Only rotate when necessary
        "TwirlingCritic",    # Penalize unnecessary rotation
        "Oscillation"        # Prevent oscillation
      ]
      
      # Path following critics
      PathDist.scale: 10.0
      PathDist.aggregation_type: "sum"
      
      GoalDist.scale: 10.0
      GoalDist.aggregation_type: "sum"

      # GoalAlign: Gradually align with goal orientation during approach
      GoalAlign.scale: 0.0         #decreasing this # Moderate weight for gradual alignment
      GoalAlign.aggregation_type: "sum"
      GoalAlign.forward_point_distance: 0.1    # Look ahead distance for alignment
      
      # HOLONOMIC-SPECIFIC CRITICS
      
      # PathAlign: Encourages movement in the direction of the path
      PathAlign.scale: 10.0 #100.0
      PathAlign.aggregation_type: "sum"
      PathAlign.forward_point_distance: 0.3  # Look ahead distance

      # PathProgress.scale: 15.0           # Reduced from 25.0
      # PathProgress.aggregation_type: "sum"
      
      # PreferForward: Penalizes backward movement
      PreferForward.scale: 0.0
      PreferForward.strafe_x: 0.1      # Allow some backward motion
      PreferForward.strafe_y: 0.1      # No penalty for lateral motion
      PreferForward.theta_scale: 2.0   # Moderate penalty for rotation
      
      # RotateToGoal: Only rotate when close to goal
      RotateToGoal.scale: 5.0 #25.0
      # RotateToGoal.slowing_factor: 2.0
      # RotateToGoal.lookahead_time: 2. # used to check for collisions some time ahead i think
      
      # TwirlingCritic: Heavily penalize unnecessary rotation during translation
      # TwirlingCritic.scale: 10.0       # High penalty for 
      TwirlingCritic.scale: 0.0
      TwirlingCritic.aggregation_type: "sum"
      
      # Oscillation prevention
      Oscillation.scale: 0.0  # was on 10.0 July6
      Oscillation.x_only_threshold: 0.03
      Oscillation.y_only_threshold: 0.03
      Oscillation.reset_dist: 0.05
      Oscillation.reset_angle: 0.1
      Oscillation.reset_time: 2.0


# COSTMAPS: Minimal inflation to allow straight paths
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      robot_radius: 0.26
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          raytrace_min_range: 0.20
          obstacle_min_range: 0.20
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0  # Higher scaling for sharper cost gradient
        inflation_radius: 0.3     # MUCH smaller - was 1.75, now 0.25
        
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0  # Reduced frequency for global costmap
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.26
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          raytrace_min_range: 0.20
          obstacle_min_range: 0.20
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 10.0
        inflation_radius: 0.3     # MUCH smaller - was 1.75, now 0.25
        
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
map_server:
  ros__parameters:
    yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 4.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_straightline_planner/StraightLine"
      tolerance: 0.02
      use_astar: false
      allow_unknown: true
# planner_server:
#   ros__parameters:
#     plugins: ["StraightLine"]
#     GridBased:
#       plugin: "nav2_straightline_planner/StraightLine"
#       interpolation_resolution: 0.1

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True
      # w_smooth: 0.3               # Weight for smoothness vs following original path
      # w_data: 0.2                 # Weight for following original path
      # w_curvature: 0.0            # Weight for minimizing curvature

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.50
    min_rotational_vel: 0.40
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 5
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 10

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: True
    feedback: "OPEN_LOOP"
    
    # Keep your original speeds - they're fine
    max_velocity: [0.15, 0.15, 3.0]
    min_velocity: [-0.15, -0.15, -3.0]
    
    # Keep your original accelerations - speed isn't the issue
    max_accel: [1.5, 1.5, 3.0]
    max_decel: [-1.5, -1.5, -3.0]
    
    odom_topic: "odom"  # Make sure this matches your actual topic
    odom_duration: 0.1
    deadband_velocity: [0.01, 0.01, 0.02]  # Small deadband to stop micro-movements
    velocity_timeout: 1.0

